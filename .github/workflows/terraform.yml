name: 'Terraform Backend Management CI/CD'

on:
  push:
    branches-ignore:
      - development # N√£o rodar em pushes para a branch development
  pull_request:
    branches:
      - master # Rodar em PRs para a branch master

permissions:
  id-token: write   # Necess√°rio para autentica√ß√£o OIDC com AWS
  contents: read    # Necess√°rio para checkout do c√≥digo
  pull-requests: write # Para adicionar coment√°rios de plano em PRs (opcional)

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      # Estas vari√°veis s√£o usadas pelos recursos em main.tf
      TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }} # Ex: us-east-1
      AWS_REGION: ${{ secrets.AWS_REGION }} # Usado pela action aws-actions/configure-aws-credentials

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # ARN do seu IAM Role para GitHub Actions
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.12.1" # Mantenha sincronizado com providers.tf

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      # Executa o plan em todos os pushes para PRs e tamb√©m antes do apply na branch principal
      run: terraform plan -no-color -input=false -out=tfplan
      # Opcional: Adicionar um coment√°rio ao PR com o output do plano
      # if: github.event_name == 'pull_request'
      # uses: actions/github-script@v6
      # with:
      #   github-token: ${{ secrets.GITHUB_TOKEN }}
      #   script: |
      #     const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>
      #
      #       \`\`\`diff
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`
      #
      #       </details>
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #
      #       \`\`\`diff
      #       ${process.env.PLAN}
      #       \`\`\`
      #
      #       </details>`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false tfplan